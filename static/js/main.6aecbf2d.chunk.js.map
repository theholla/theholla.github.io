{"version":3,"sources":["components/EventCard.tsx","components/Hero.tsx","components/PageHeader.tsx","components/Results.tsx","components/SearchBar.tsx","App.tsx","vendor/registerServiceWorker.js","index.tsx"],"names":["getEventClass","isSelected","className","getStageClass","stageId","Stage","GALAXY_BARN","LUCKY_BARN","MT_HOOD_STAGE","STARLIGHT_STAGE","TREELINE_STAGE","WOOD_STAGE","EventCard","props","artist","uuid","location","startTime","endTime","day","gig","onClick","key","Hero","PageHeader","onStageFilterClick","stageFilter","getButtonClass","Results","performances","searchResults","length","map","details","SearchBar","aria-label","type","placeholder","onChange","onSearch","stageIdFromLocation","App","eventDictionary","schedule","forEach","rawEvent","id","event","onEventClick","bind","state","searchParams","this","setState","prevState","e","target","value","isToggled","name","toLowerCase","params","includes","endDateTime","moment","utc","subtract","Object","values","toEventArray","filter","isEventRecent","isStageSelected","searchResultsArray","doesArtistMatchSearch","handleSearchChange","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6aecbf2d.chunk.js","sourcesContent":["import React from 'react';\nimport { Stage, StageId, Performance } from '../App';\n\nfunction getEventClass(isSelected: boolean): string {\n  let className = '';\n  if (isSelected) className = ' selected-event';\n  return className;\n}\n\nfunction getStageClass(stageId: StageId): string {\n  switch (stageId) {\n    case Stage.GALAXY_BARN:\n      return 'galaxy';\n    case Stage.LUCKY_BARN:\n      return 'lucky';\n    case Stage.MT_HOOD_STAGE:\n      return 'mthood';\n    case Stage.STARLIGHT_STAGE:\n      return 'starlight';\n    case Stage.TREELINE_STAGE:\n      return 'treeline';\n    case Stage.WOOD_STAGE:\n      return 'wood';\n    default:\n      return '';\n  }\n}\nexport function EventCard(props: Performance): JSX.Element {\n  const { artist, uuid, location, startTime, endTime, day, gig, onClick, isSelected, stageId } = props;\n\n  return (\n    <div onClick={onClick} key={uuid} className={`event ${getStageClass(stageId)} ${getEventClass(isSelected)}`}>\n      <div className={'artist'}>{artist}</div>\n      <div className={'time'}>\n        {day} {startTime} - {endTime}\n      </div>\n      <div className={'location'}>{location}</div>\n      <div className={'gig'}>Gig: {gig}</div>\n    </div>\n  );\n}\n","import React from 'react';\n// import { useSpring, animated } from 'react-spring';\n\nexport function Hero(): JSX.Element {\n  return (\n    <header className={'hero'}>\n      <div className={'hero-content'}>\n        <h1>Pickathon</h1>\n        <h2>Shockingly Fast Schedule Viewer</h2>\n      </div>\n    </header>\n  );\n}\n","import React from 'react';\nimport { StageFilter, Stage, StageId } from '../App';\nimport { Hero } from '.';\n\ntype PageHeaderProps = {\n  onStageFilterClick: (stageId: StageId) => void;\n  stageFilter: StageFilter;\n};\nexport function PageHeader(props: PageHeaderProps): JSX.Element {\n  const { onStageFilterClick, stageFilter } = props;\n\n  function getButtonClass(stageId: Stage): string {\n    if (stageFilter[stageId]) {\n      return ' show-stage';\n    }\n    return '';\n  }\n\n  return (\n    <div>\n      <Hero />\n      <div>\n        <div className={'stage-button-bar'}>\n          <button\n            className={'galaxy stage-button' + getButtonClass(Stage.GALAXY_BARN)}\n            onClick={(): void => onStageFilterClick(Stage.GALAXY_BARN)}\n          >\n            Galaxy\n          </button>\n          <button\n            className={'lucky stage-button' + getButtonClass(Stage.LUCKY_BARN)}\n            onClick={(): void => onStageFilterClick(Stage.LUCKY_BARN)}\n          >\n            Lucky\n          </button>\n          <button\n            className={'mthood stage-button' + getButtonClass(Stage.MT_HOOD_STAGE)}\n            onClick={(): void => onStageFilterClick(Stage.MT_HOOD_STAGE)}\n          >\n            Hood\n          </button>\n          <button\n            className={'starlight stage-button' + getButtonClass(Stage.STARLIGHT_STAGE)}\n            onClick={(): void => onStageFilterClick(Stage.STARLIGHT_STAGE)}\n          >\n            Star\n          </button>\n          <button\n            className={'treeline stage-button' + getButtonClass(Stage.TREELINE_STAGE)}\n            onClick={(): void => onStageFilterClick(Stage.TREELINE_STAGE)}\n          >\n            Tree\n          </button>\n          <button\n            className={'wood stage-button' + getButtonClass(Stage.WOOD_STAGE)}\n            onClick={(): void => onStageFilterClick(Stage.WOOD_STAGE)}\n          >\n            Wood\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Performance } from '../App';\nimport { EventCard } from '.';\n\ninterface ResultsProps {\n  performances: Array<Performance>;\n  searchResults: Array<Performance>;\n}\n\nfunction renderEmptyState(): ReactElement {\n  return <p className={'results-empty'}>Nothing to see here. Did you select a stage name?</p>;\n}\n\nexport function Results(props: ResultsProps): JSX.Element {\n  const { performances, searchResults } = props;\n  return (\n    <div className={'results'}>\n      {searchResults.length\n        ? searchResults.map(details => EventCard(details))\n        : performances.map(details => EventCard(details))}\n      {!performances.length && !searchResults.length && renderEmptyState()}\n    </div>\n  );\n}\n","import React from 'react';\n\ninterface SearchBarProps {\n  onSearch: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\nexport function SearchBar(props: SearchBarProps): JSX.Element {\n  return (\n    <form>\n      <label className={'search-container'}>\n        <input\n          aria-label={'Filter by artist'}\n          className={'search-input'}\n          type=\"text\"\n          placeholder=\"filter by artist\"\n          onChange={props.onSearch}\n        />\n      </label>\n    </form>\n  );\n}\n","import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport schedule from './lib/master-schedule.json';\nimport { PageHeader, SearchBar, Results } from './components';\nimport moment from 'moment';\n\nexport enum Stage {\n  GALAXY_BARN = 'GALAXY_BARN',\n  LUCKY_BARN = 'LUCKY_BARN',\n  MT_HOOD_STAGE = 'MT_HOOD_STAGE',\n  STARLIGHT_STAGE = 'STARLIGHT_STAGE',\n  TREELINE_STAGE = 'TREELINE_STAGE',\n  WOOD_STAGE = 'WOOD_STAGE',\n}\n\nfunction stageIdFromLocation(location: string): StageId {\n  switch (location) {\n    case 'Treeline Stage':\n      return Stage.TREELINE_STAGE;\n    case 'Mt. Hood Stage':\n      return Stage.MT_HOOD_STAGE;\n    case 'Galaxy Barn':\n      return Stage.GALAXY_BARN;\n    case 'Starlight Stage':\n      return Stage.STARLIGHT_STAGE;\n    case 'Lucky Barn':\n      return Stage.LUCKY_BARN;\n    case 'Woods Stage':\n      return Stage.WOOD_STAGE;\n    default:\n      return Stage.TREELINE_STAGE;\n  }\n}\n\ninterface RawEvent {\n  artist: string;\n  location: string;\n  startTime: string;\n  endTime: string;\n  endDateTime: string;\n  day: string;\n  gig: string;\n}\n\nexport type StageId = keyof typeof Stage;\nexport type Performance = RawEvent & {\n  uuid: string;\n  isSelected: boolean;\n  onClick: () => void;\n  stageId: StageId;\n};\n\ntype EventDictionary = {\n  [key: string]: Performance;\n};\n\nexport interface StageFilter {\n  GALAXY_BARN: boolean;\n  LUCKY_BARN: boolean;\n  MT_HOOD_STAGE: boolean;\n  STARLIGHT_STAGE: boolean;\n  TREELINE_STAGE: boolean;\n  WOOD_STAGE: boolean;\n}\ntype SearchParams = string;\ninterface AppState {\n  eventDictionary: EventDictionary;\n  stageFilter: StageFilter;\n  searchParams: SearchParams;\n}\n\nclass App extends Component<{}, AppState> {\n  constructor(props: object) {\n    super(props);\n\n    // enhance event dictionary\n    const eventDictionary: EventDictionary = {};\n    schedule.forEach((rawEvent: RawEvent): void => {\n      const id = uuid();\n      const event = {\n        uuid: id,\n        isSelected: false,\n        onClick: this.onEventClick.bind(this, id),\n        stageId: stageIdFromLocation(rawEvent.location),\n        ...rawEvent,\n      };\n      eventDictionary[id] = event;\n    });\n\n    this.state = {\n      eventDictionary,\n      searchParams: '',\n      stageFilter: {\n        GALAXY_BARN: false,\n        LUCKY_BARN: false,\n        MT_HOOD_STAGE: false,\n        STARLIGHT_STAGE: false,\n        TREELINE_STAGE: false,\n        WOOD_STAGE: false,\n      },\n    };\n  }\n\n  onEventClick(uuid: string): void {\n    return this.setState(prevState => {\n      const isSelected = prevState.eventDictionary[uuid].isSelected;\n      prevState.eventDictionary[uuid].isSelected = !isSelected;\n      return prevState;\n    });\n  }\n\n  handleSearchChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    return this.setState({ searchParams: e.target.value });\n  }\n\n  onStageFilterClick(stageId: StageId): void {\n    return this.setState(prevState => {\n      const isToggled = prevState.stageFilter[stageId];\n      prevState.stageFilter[stageId] = !isToggled;\n    });\n  }\n\n  doesArtistMatchSearch(artist: string): boolean {\n    const searchParams = this.state.searchParams;\n    if (searchParams.length >= 2) {\n      const name = artist.toLowerCase();\n      const params = searchParams.toLowerCase();\n      return name.includes(params);\n    }\n    return false;\n  }\n\n  isStageSelected(stageId: StageId): boolean {\n    return this.state.stageFilter[stageId];\n  }\n\n  isEventRecent(endDateTime: string): boolean {\n    return (\n      moment(endDateTime).utc() >\n      moment()\n        .subtract(1, 'week')\n        .utc()\n    );\n  }\n\n  toEventArray(eventDictionary: EventDictionary): Array<Performance> {\n    return Object.values(eventDictionary);\n  }\n\n  render(): JSX.Element {\n    const performances = this.toEventArray(this.state.eventDictionary).filter(\n      event => this.isEventRecent(event.endDateTime) && this.isStageSelected(event.stageId)\n    );\n\n    const searchResultsArray = this.toEventArray(this.state.eventDictionary).filter(\n      event => this.isEventRecent(event.endDateTime) && this.doesArtistMatchSearch(event.artist)\n    );\n\n    return (\n      <div>\n        <PageHeader onStageFilterClick={this.onStageFilterClick.bind(this)} stageFilter={this.state.stageFilter} />\n        <SearchBar onSearch={this.handleSearchChange.bind(this)} />\n        <Results performances={performances} searchResults={searchResultsArray} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport registerServiceWorker from './vendor/registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}